include: "includes/help/Workflow.0x0.man"

# Optional rule order. May be used for clarity on large workflows:
ruleorder:  exe_dnsmap2ipr > glue_dnsmap2iplist > glue_dnsmap2ipr_merge > exe_ipr2nmap > glue_nmap2tbl 

rule all:
	""" Phony: Runs all tasks
   	Type: Task (Phony)
    Parameters:
				The last `output` file that starts the recursive chain of jobs
    Returns:
			None
	"""
	input:
		"data/nmap.tbl"

rule exe_dnsmap2ipr:
    """Runs dnsmap on a domain and outputs a CSV of the results

    Type: Task
    Parameters:
                File containing domain(s), one per line for 
                processing with `dnsmap`

    Returns:
                File of `dnsmap` results in CSV format
 
    Notes: 
           Out of band pre-requisites:  
               (file) cdata/server-name-wordlist-mnemonic.txt
               fetchable with `helpers/fetch_wordlist.sh`


    """
    message: "[Task] Runs dnsmap on a domain and outputs a CSV of the results"
    log: "logs/exe_dnsmap2ipr.log"
    input:
        "data/dnsmap.domain"
    output:
        dnsmap_csv="data/dnsmap.csv"
    run:
        shell("dnsmap $( cat {input} ) -w cdata/server-name-wordlist-mnemonic.txt   -c {output} ")

# Type: Glue
# Parses dnsmap output into a list of subdomains/hosts found
#
# Context Pre-Requisites: None
# Note: the output generated by pipeline is not used futehre. It is left as a reference for analyst
rule glue_dnsmap2hosts:
    """Parses `dnsmap` output into a list of subdomains/hosts found

    Type: Glue
    Parameters:
                File of `dnsmap` results in CSV format

    Returns:
                File containing list of sub domain(s)
 
    Notes: 


    """
    message: "Parses dnsmap output into a list of subdomains/hosts found"
    input:
        rules.exe_dnsmap2ipr.output.dnsmap_csv # example of a rule variable vs. path
    output:
        "data/dnsmap.hosts"
    shell:
        """ cat {input} | cut -d, -f1  | sort -u  > {output} """


# Type: Glue
# Parses dnsmap output into a list of Ips found
#
# Context Pre-Requisites: None
rule glue_dnsmap2iplist:
    message: "[Glue] Parses dnsmap output into a list of Ips found"

    input:
        "data/dnsmap.csv"
    output:
        "data/dnsmap.ips"
    shell:
        # """cat {input} | cut -d"," -f2- | sed 's/,/\\n/g' > {output}"""
        """cat {input} | cut -d"," -f2- | tr , '\n' | grep -v ^:: > {output}"""

# Type: Glue
# Merges dnsmap IPs with Additonal scope IPs into a file
#
# Context Pre-Requisites: None
rule glue_dnsmap2ipr_merge:
    message: "[Glue] Merges dnsmap IPs with Additonal scope IPs into a file"
    input:
        "data/dnsmap.ips",
        "data/addtl-ip-scope" 
    output:
        "data/ipranges"
    run:
        commands = [
            "cat {input} >> {output}"
        ]
        for c in commands:
            shell(c)

# Type: Executable
# Runs NMAP on a scoped list of IPs, domains, CIDRs
#
# Context Pre-Requisites: None
rule exe_ipr2nmap:
    message: "[Task] Runs NMAP on a scoped list of IPs, domains, CIDRs"
    input:
        "data/ipranges"
    output:
        "data/nmap.syn.xml"
    shell:
        "sudo nmap -sS -iL {input} -oX data/nmap.syn.xml --verbose"

# Type: Glue
# Parses NMAP XML to provide a table format of ports and services
#
# Context Pre-Requisites: None
rule glue_nmap2tbl:
    """[Glue] Parses NMAP XML to provide a tabel format of ports and services """
    message: "[Glue] Parses NMAP XML to provide a tabel format of ports and services"
    input:
        "data/nmap.syn.xml"
    output:
        "data/nmap.tbl"
    script:
        "scripts/nmap_tbl.py" # continue to use logger inside the script, or call from "shell"


# Type: Glue
# A non-bound job to dump visual of the workflow task dependencies
#
# Context Pre-Requisites: None
rule exe_workflow_report_dag:
    message: "[Standalone] A non-bound job to dump visual of the workflow task dependencies"
    output:
        "reports/Workflow.0x0.dot"
    params:
        png_file = "reports/Workflow.0x0.png"
    run:
        shell(""" snakemake --dag --snakefile Workflow.0x0  "data/nmap.tbl" | dot > {output} """)
        shell(""" dot -Tpng {output} -o  {params.png_file}""")

### END ###
